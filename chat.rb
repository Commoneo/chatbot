# Chat class
# Written by Jordan Halaby
# Purpose is to be an AI chatbot that converses with the user 
# Version 1.0

# class Chat
class Chat
	# class variables
	@@client = nil
	@@last = nil
	@@greeted = false
	@@db = nil
	@@form = nil
	@@form_index = nil
	@@processed = nil

	# API object for SimpleNLG
	@@nlg = SimpleNLG::NLG
	
	#@@forms = ["Withholdings Form", "Employment History Form", "Scan of Diploma", "I9 Supporting Documents", "I9 Authorized Representative Form", "Direct Deposit Documentation", "Fieldglass User Guide", "E-Verify Self Check Instructions", "Self Check Results", "Electronic Fund Transfer Authorization", "Certificate of Insurance", "Business Director Listing", "Customer List", "Equipment List", "JPMC EJC Appplication Instructions", "Hourly Consultant Benefits Waiver", "Employment Application", "Sick Leave Notice", "I9 Form", "ACA Benefits Election"]
	
	# array of responses generated by SimpleNLG
	@@responses = [
		@@nlg.render{"Please re-phrase your input"},
		@@nlg.render{phrase(:s=>mod("State that", "you"), :v=>pre_mod("unemploy", "were"), :o=>pre_mod("that time period", "during"), :t=>"past")},
		@@nlg.render{phrase(:s=>"you", :v=>mod("must", "list"), :t=>"present", :o=>pre_mod("years of employment", "between 7 to 10"))},
		@@nlg.render{phrase(:s=>post_mod("you", "must provide"), :t=>"present", :o=>post_mod("final year marksheet", "and degree copy"))},
		@@nlg.render{phrase(:s=>post_mod("you", "must provide"), :t=>"present", :o=>post_mod("a copy of", "your degree"))},
		@@nlg.render{phrase(:s=>pre_mod("a document", "the front and back of"), :o=>post_mod("such as", "your drivers license, social security card, or birth certificate"))},
		@@nlg.render{phrase(:s=>pre_mod("the I9 Form", "it is required for"), :v=>mod("that you", "upload"), :o=>"a supporting document")},
		@@nlg.render{phrase(:s=>pre_mod("should upload", "you"), :perfect=>:true, :o=>pre_mod("the document", "the front and back of"))},
		@@nlg.render{phrase(:s=>pre_mod("can be", "this"), :v=>"filled", :t=>"past", :o=>"out by any person, related or not, that is over 18 years of age, has a valid email, and is not yourself")},
		@@nlg.render{phrase(:s=>pre_mod("direct deposit documentation, you", "for"), :v=>"need to provide", :t=>"future", :o=>"a typed letter")},
		@@nlg.render{phrase(:s=>post_mod("you must provide", "a typed letter so that you don't get"), :v=>"linked", :t=>"past", :o=>"to the wrong bank account")},
		@@nlg.render{"Follow the instructions"},
		@@nlg.render{phrase(s:"you", :v=>pre_mod("recieving","are"), :o=>post_mod("this form", "because you either work or live in this state"))},
		@@nlg.render{phrase(s:post_mod("per company policy,", "this"), :v=>mod("checks", "to see if the individual is eligible to work in"), :o=>"the United States")},
		@@nlg.render{phrase(:s=>"a picture of the green checkmark", :v=>mod("that", "confirms"), :o=>"work authorization")},
		@@nlg.render{phrase(:s=>pre_mod("can", "you"), :v=>"determine", :o=>"if you are eligble by completing the E-Verify Self Check")},
		@@nlg.render{phrase(:s=>mod("you", "should"), :v=>post_mod("click", "this when you want a"), :o=>"paper check for payment")},
		@@nlg.render{phrase(:s=>"you", :v=>pre_mod("receive", "can"), :o=>"direct deposit by clicking the 'New EFT Account' button")},
		@@nlg.render{phrase(:s=>"the certicate holder", :v=>"is", :o=>post_mod("Commoneo", "and please supply our address"))},
		@@nlg.render{phrase(:s=>pre_mod("IC, you must carry", "as an"), :o=>"insurance required by the client")},
		@@nlg.render{phrase(:s=>"you", :v=>"can upload", :o=>"any profile that you represent yourself with")},
		@@nlg.render{phrase(:s=>"you", :v=>"can upload", :o=>"from, for example, Facebook, LinkedIn, etc")},
		@@nlg.render{phrase(:s=>"the customer list",  :v=>pre_mod("to substantiate", "helps"), :o=>"your validity as an IC in the case of an IRS audit")},
		@@nlg.render{phrase(:s=>"you", :v=>post_mod("must", "supply"), :o=>"a list of your customers")},
		@@nlg.render{phrase(:v=>post_mod("helps", "differentiate"), :o=>"your status as an independent contractor as opposed to a W2")},
		@@nlg.render{phrase(:s=>"Listing of any equipment that you bring", :o=>"with you on-site during a project")},
		@@nlg.render{"Do you bring anything with you on-site? If so, list the items here"},
		@@nlg.render{phrase(:s=>"the code", :v=>"is", :o=>"JPMCCW ( colored in red )")},
		@@nlg.render{"Go to applicationstation.com, use your previous username and paasword"},
		@@nlg.render{phrase(:s=>"Follow", :o=>"the instructions on the JPMC EJC Application Instructions")},
		@@nlg.render{phrase(:s=>pre_mod("benefits that you are eligible for", "any"),  :v=>"come from", :o=>"VSG and not from the client")} ,
		@@nlg.render{"Input 'N/A' for those fields"},
		@@nlg.render{phrase(:s=>post_mod("scroll through this ","item"), :o=>"and if you location is on it, you get benefits")},
		@@nlg.render{phrase(:s=>post_mod("accepting coverage", "doesn't necessarily"), :o=>post_mod("mean you are", "enrolled"))},
		@@nlg.render{phrase(:s=>post_mod("waiving coverage"), :v=>"mean", :o=>post_mod("that you will not be enrolled in", "ACA benefits"))}
	]
	
	# array of hashes of all form names
	@@allForms = [
			Hash["binary" => "00000", "frm"=>"Other Form"],
			Hash["binary" => "00001", "frm"=>"Employment History Form"],
			Hash["binary" => "00010", "frm"=>"Scan of Diploma"],
			Hash["binary" => "00011", "frm"=>"I9 Supporting Documents"],
			Hash["binary" => "00100", "frm"=>"I9 Authorized Representative Form"],
			Hash["binary" => "00101", "frm"=>"Direct Deposit Documentation"],
			Hash["binary" => "00110", "frm"=>"Fieldglass User Guide"],
			Hash["binary" => "00111", "frm"=>"Withholdings Form"],
			Hash["binary" => "01000", "frm"=>"E-Verify Self Check Instructions"],
			Hash["binary" => "01001", "frm"=>"Self Check Results"],
			Hash["binary" => "01010", "frm"=>"Electronic Fund Transfer Authorization"],
			Hash["binary" => "01011", "frm"=>"Certificate of Insurance"],
			Hash["binary" => "01100", "frm"=>"Business Director Listing"],
			Hash["binary" => "01101", "frm"=>"Customer List"],
			Hash["binary" => "01110", "frm"=>"Equipment List"],
			Hash["binary" => "01111", "frm"=>"JPMC EJC Appplication Instructions"],
			Hash["binary" => "10000", "frm"=>"Hourly Consultant Benefits Waiver"],
			Hash["binary" => "10001", "frm"=>"Employment Application"],
			Hash["binary" => "10010", "frm"=>"Sick Leave Notice"],
			Hash["binary" => "10011", "frm"=>"I9 Form"],
			Hash["binary" => "10100", "frm"=>"ACA Benefits Election"]
		]
	
	# class constructor
	def initialize
		# require MongoDB
		require "mongo"
		
		# create connection to MongoDB
		@@db = Mongo::Connection.new("192.168.10.203", 27017).db("chat")
		
		# create MongoDB collection
		@@db.create_collection("saves")
		
		# API object for Wit
		@@client = Wit.new(access_token: "BIRVT3TDZAI6R4R2WCEZS6XFVI5RPUCF")
	end
	
	
	# method for getting data from database
	def getData type
		# get collection
		things = @@db.collection("saves")
		# find everything in collection
		cursor = things.find()
		
		# go through all documents in collection and display data
		cursor.each { |row| 
			if(row[type] != nil)
				frm = row["form"]
				if(frm == nil)
					frm = "N/A"
				end
				puts row[type] + " || Form: " + frm
			end
		} 
	end
	
	# mthod for getting the firt entity value from user input from Wit
	def first_entity_value(entities, entity)
	  return nil unless entities.has_key? entity
	  if(entity == "question_type")
			val = entities[entity][1]["value"]
	  else
		val = entities[entity][0]["value"]
	  end
	  return nil if val.nil?
	  return val.is_a?(Hash) ? val["value"] : val
	end

	# method for greeting a user after an initial greeting
	def regreet
		# array of offers
		offer = ["Can I help you?", "How can I help you?", "Do you need help?", "What can I help you with?"]
		
		# regreet user
		sentence = "I remember you! " + offer.sample
		
		# return 
		return sentence
	end
	
	# method for greeting a user
	def greeting
		# array of greetings and offers
		greetings = ["Hey!", "Hello!", "Good day!", "Greetings!", "Hi!"]
		offer = ["Can I help you?", "How can I help you?", "Do you need help?", "What can I help you with?"]
		
		# construct random sentence
		g = greetings.sample
		o = offer.sample
		sentence = g + " " + o
		
		# return sentence
		return sentence
	end
	
	
	# method for getting the name of the form from user input
	def getForm(entry)
		# split the user input by ||
		pieces = entry.split("||")
		frm = pieces[0]
		frm = frm.to_i
		
		# get form name from array
		if(frm < @@allForms.length)
			@@form_index = frm
			frm = @@allForms[frm]["frm"]
		else
			frm = "N/A"
		end
		
		# return form name
		return frm
	end
	
	# method for writing a user input to database
	def writeToFile(type, text)
		# get collection
		things = @@db.collection("saves")
		
		# get form name
		frm = @@form
		
		# check if form variable is set
		if(!frm)
			frm = "N/A"
		end
		
		# insert into document
		things.insert(type => text, "form" => frm)
	end
	
	# method for processing form
	def process_form(entry)
		# set flag variable
		@@processed = true
		# check for inclusion of ||
		if(entry.include?"||")
			# get form
			@@form = getForm(entry)
			# split by ||
			ins = entry.split("||")
			# get user input
			@@last = ins[1]
		else
			# change flag
			@@processed = false
			# specify error format
			puts "You must specify a form in this format: 1||message"
		end
	end
	
	# method for handling a message
	def handle_message(response)
		
		
		# get user entry
		entry = response["_text"]
		
		# get user entities
		entities = response["entities"]
		  
		# get entity value for greetings and type
		greetings = first_entity_value(entities, "greetings")
		type = first_entity_value(entities, "type")
		
		# get entity value for question type
		question_type = first_entity_value(entities, "question_type")
		
		# get entity value for question content
		question_content_why = first_entity_value(entities, "why_questions")
		question_content_which = first_entity_value(entities, "which_questions")
		question_content_can = first_entity_value(entities, "can_questions")
		question_content_what = first_entity_value(entities, "what_questions")
		question_content_does = first_entity_value(entities, "does_questions")
		question_content_how = first_entity_value(entities, "how_questions")
		question_content_who = first_entity_value(entities, "who_questions")
		
		# get entity value for question object
		question_object_obtain = first_entity_value(entities, "obtain_object")
		question_object_waive = first_entity_value(entities, "waive_object")
		question_object_need = first_entity_value(entities, "need_object")
		question_object_posses = first_entity_value(entities, "posses_object")
		question_object_acts = first_entity_value(entities, "acts_object")
		question_object_click = first_entity_value(entities, "click_object")
		question_object_result = first_entity_value(entities, "result_object")
		question_object_know = first_entity_value(entities, "know_object")
		question_object_fill = first_entity_value(entities, "fill_object")
		question_object_related = first_entity_value(entities, "related_object")
		question_object_mean = first_entity_value(entities, "mean_object")
		question_object_provide = first_entity_value(entities, "provide_object")
		
		# get entity value for various entities
		coverage_action = first_entity_value(entities, "coverage_action")
		
		location_india = first_entity_value(entities, "location_india")
		
		action_verb = first_entity_value(entities, "action_verb")
		
		navigate_to = first_entity_value(entities, "navigate_to")
		
		# check if last is set
		if(!@@last)
			@@last = "N/A"
		end
		
		# check for saving/removing/updating and write to database
		if entry == "save"
			writeToFile("save", @@last)
			return "Saving: " + @@last
		elsif entry == "update"
			writeToFile("update", @@last)
			return "Update: " + @@last
		elsif entry == "remove"
			writeToFile("remove", @@last)
			return "Remove: " + @@last
		else		
			# generate test ddata
			case
			when type == "question" || type == "statement"
				process_form(entry)
				if(@@processed)
					question_type_dec = nil
					if(question_type == "what")
						question_type_dec = 9
					elsif(question_type == "how")
						question_type_dec = 10
					elsif(question_type == "why")
						question_type_dec = 7
					elsif(question_type == "which")
						question_type_dec = 8
					elsif(question_type == "who")
						question_type_dec = 4
					elsif(question_type == "when")
						question_type_dec = 5
					elsif(question_type == "where")
						question_type_dec = 1
					elsif(question_type == "does")
						question_type_dec = 2
					elsif(question_type == "should")
						question_type_dec = 6
					elsif(question_type == "can")
						question_type_dec = 3
					else
						question_type_dec = 0
					end
					
					question_content_dec = nil
					
					
					if(question_content_why == "can't fill")
						question_content_dec = 1
					elsif(question_content_why == "form in queue")
						question_content_dec = 2
					elsif(question_content_why == "necessary")
						question_content_dec = 3
					elsif(question_content_why == "click")
						question_content_dec = 4
					elsif(question_content_why == "in queue")
						question_content_dec = 5
					elsif(question_content_why == "provide")
						question_content_dec = 6
					
					elsif(question_content_which == "side")
						question_content_dec = 7
					
					elsif(question_content_can == "provide")
						question_content_dec = 8
					
					elsif(question_content_what == "purpose")
						question_content_dec = 9
					elsif(question_content_what == "required")
						question_content_dec = 10
					elsif(question_content_what == "upload")
						question_content_dec = 11
					elsif(question_content_what == "options")
						question_content_dec = 12
					elsif(question_content_what == "mean")
						question_content_dec = 13
					elsif(question_content_what == "not-posses")
						question_content_dec = 14
					elsif(question_content_what == "code")
						question_content_dec = 15
					elsif(question_content_what == "result")
						question_content_dec = 16
					elsif(question_content_what == "action")
						question_content_dec = 17
					elsif(question_content_what == "waived")
						question_content_dec = 18
					elsif(question_content_what == "fill")
						question_content_dec = 19
					
					elsif(question_content_does == "related")
						question_content_dec = 20
					
					elsif(question_content_how == "logon")
						question_content_dec = 21
					elsif(question_content_how == "years")
						question_content_dec = 22
					elsif(question_content_how == "obtain")
						question_content_dec = 23
					elsif(question_content_how == "age")
						question_content_dec = 24
					elsif(question_content_how == "know")
						question_content_dec = 25
					elsif(question_content_how == "navigate")
						question_content_dec = 26
					
					elsif(question_content_who == "fill")
						question_content_dec = 27
					elsif(question_content_who == "acts")
						question_content_dec = 28
					
					else
						question_content_dec = 0
					end
					
					question_object_dec = nil
					
					if(question_object_obtain == "direct deposit")
						question_object_dec = 1
					elsif(question_object_waive == "benefits")
						question_object_dec = 2
					elsif(question_object_waive == "coverage")
						question_object_dec = 3
					elsif(question_object_need == "upload")
						question_object_dec = 4
					elsif(question_object_need == "fill")
						question_object_dec = 5
					elsif(question_object_posses == "information")
						question_object_dec = 6
					elsif(question_object_posses == "equipment")
						question_object_dec = 7
					elsif(question_object_acts == "certificate holder")
						question_object_dec = 8
					elsif(question_object_click == "Cancel EFT")
						question_object_dec = 9
					elsif(question_object_click == "New EFT Account")
						question_object_dec = 10
					elsif(question_object_result == "advertise")
						question_object_dec = 11
					elsif(question_object_know == "eligible")
						question_object_dec = 12
					elsif(question_object_know == "sick leave benefits")
						question_object_dec = 13
					elsif(question_object_fill == "supporting document")
						question_object_dec = 14
					elsif(question_object_fill == "page")
						question_object_dec = 15
					elsif(question_object_fill == "form")
						question_object_dec = 16
					elsif(question_object_fill == "employment gap")
						question_object_dec = 17
					elsif(question_object_fill == "it")
						question_object_dec = 18
					elsif(question_object_related == "myself")
						question_object_dec = 19
					elsif(question_object_related == "someone")
						question_object_dec = 20
					elsif(question_object_related == "representative")
						question_object_dec = 21
					elsif(question_object_mean == "coverage")
						question_object_dec = 22
					elsif(question_object_provide == "typed letter")
						question_object_dec = 23
					elsif(question_object_provide == "written letter")
						question_object_dec = 24
					elsif(question_object_provide == "letter")
						question_object_dec = 25
					else
						question_object_dec = 0
					end
					
					coverage_action_dec = nil
					if(coverage_action == "waive")
						coverage_action_dec = 1
					elsif(coverage_action == "accept")
						coverage_action_dec = 2
					else
						coverage_action_dec = 0
					end
		
					location_india_dec = nil
					if(location_india == "true")
						location_india_dec = 1
					elsif(location_india == "false")
						location_india_dec = 2
					else
						location_india_dec = 0
					end
		
					action_verb_dec = nil
					if(action_verb == "waive")
						action_verb_dec = 1
					else
						action_verb_dec = 0
					end
					
					navigate_to_dec = nil
					if(navigate_to == "application")
						navigate_to_dec = 1
					elsif(navigate_to == "completed application")
						navigate_to_dec = 2
					else
						navigate_to_dec = 0
					end
					
					
					type = "0"
					question_type_bin = convert(question_type_dec, "quesiton_type")
					question_content_bin = convert(question_content_dec, "question_content")
					question_object_bin = convert(question_object_dec, "question_object")
					coverage_action_bin = convert(coverage_action_dec, "coverage_action")
					location_india_bin = convert(location_india_dec, "location_india")
					action_verb_bin = convert(action_verb_dec, "action_verb")
					navigate_to_bin = convert(navigate_to_dec, "navigate_to")
					
					# concatenate entity test data
					str = question_type_bin + question_content_bin + question_object_bin + coverage_action_bin + location_india_bin + action_verb_bin + navigate_to_bin
					
					# convert form 
					form_bin = convertform(@@form_index)
					
					# concatenate rest of test data
					str = form_bin + "" + type + "" + str
					
					# get array of 1's and 0's
					final = Array.new
					vals = str.split("")
					vals.each{ |el|
						if(el == "1")
							final.push(1)
						elsif(el == "0")
							final.push(0)
						end
					}
					
					# create Decision object
					d = Decision.new
					# classify array
					classify = d.go(final)
					
					# display response
					puts @@responses[classify]
				else
					return nil
				end
			# greet or regreet the user
			when greetings
				if !@@greeted
					@@greeted = true
					return greeting()
				else
					return regreet()
				end
			# ask for rephrasal of input
			else
				return "Please re-phrase your input"
			end
		end
	end
	
	# method for converting form based on index
	def convertform(index)
		# return form binary value
		return @@allForms[index]["binary"]
	end
	
	# method for converting test data to binary
	def convert(decimal, type)	
		# arrays of hashes for conversion to binary
		navigate_to = [
			Hash["binary" => "00", "navigate" => "N/A"],
			Hash["binary" => "01", "navigate" => "Application"],
			Hash["binary" => "10", "navigate" => "Completed Application"]
		]
		action_verb = [
			Hash["binary" => "0", "action" => "N/A"],
			Hash["binary" => "1", "action" => "Waive"]
		]
		location_india = [
			Hash["binary" => "00", "india" => "N/A"],
			Hash["binary" => "01", "india" => "true"],
			Hash["binary" => "10", "india" => "false"]
		]
		coverage_action = [
			Hash["binary" => "00", "coverage" => "N/A"],
			Hash["binary" => "01", "coverage" => "Waive"],
			Hash["binary" => "10", "coverage" => "Accept"]
		]
		question_object = [
			Hash["binary" => "00000", "object" => "N/A"],
			Hash["binary" => "00001", "object" => "Direct Deposit"],
			Hash["binary" => "00010", "object" => "Benefits"],
			Hash["binary" => "00011", "object" => "Coverage"],
			Hash["binary" => "00100", "object" => "Upload"],
			Hash["binary" => "00101", "object" => "Fill"],
			Hash["binary" => "00110", "object" => "Information"],
			Hash["binary" => "00111", "object" => "Equipment"],
			Hash["binary" => "01000", "object" => "Certificate Holder"],
			Hash["binary" => "01001", "object" => "Cancel EFT"],
			Hash["binary" => "01010", "object" => "New EFT Account"],
			Hash["binary" => "01011", "object" => "Advertise"],
			Hash["binary" => "01100", "object" => "Eligible"],
			Hash["binary" => "01101", "object" => "Sick Leaave Benefits"],
			Hash["binary" => "01110", "object" => "Supporting Document"],
			Hash["binary" => "01111", "object" => "Page"],
			Hash["binary" => "10000", "object" => "Form"],
			Hash["binary" => "10001", "object" => "Employment Gap"],
			Hash["binary" => "10010", "object" => "It"],
			Hash["binary" => "10011", "object" => "Myself"],
			Hash["binary" => "10100", "object" => "Someone"],
			Hash["binary" => "10101", "object" => "Representative"],
			Hash["binary" => "10110", "object" => "Coverage"],
			Hash["binary" => "10111", "object" => "Typed Letter"],
			Hash["binary" => "11000", "object" => "Written Letter"],
			Hash["binary" => "11001", "object" => "Letter"]
		]
		quesiton_type = [
			Hash["binary" => "0000", "qtype" => "NA"],
			Hash["binary" => "0001", "qtype" => "Where"],
			Hash["binary" => "0010", "qtype" => "Does"],
			Hash["binary" => "0011", "qtype" => "Can"],
			Hash["binary" => "0100", "qtype" => "Who"],
			Hash["binary" => "0101", "qtype" => "When"],
			Hash["binary" => "0110", "qtype" => "Should"],
			Hash["binary" => "0111", "qtype" => "Why"],
			Hash["binary" => "1000", "qtype" => "Which"],
			Hash["binary" => "1001", "qtype" => "What"],
			Hash["binary" => "1010", "qtype" => "How"]
		]
		
		question_content = [
			Hash["binary" => "00000", "qcontent" => "N/A"],
			Hash["binary" => "00001", "qcontent" => "Can't Fill"],
			Hash["binary" => "00010", "qcontent" => "Form in Queue"],
			Hash["binary" => "00011", "qcontent" => "Necessary"],
			Hash["binary" => "00100", "qcontent" => "Click"],
			Hash["binary" => "00101", "qcontent" => "In Queue"],
			Hash["binary" => "00110", "qcontent" => "Provide"],
			Hash["binary" => "00111", "qcontent" => "Side"],
			Hash["binary" => "01000", "qcontent" => "Provide"],
			Hash["binary" => "01001", "qcontent" => "Purpose"],
			Hash["binary" => "01010", "qcontent" => "Required"],
			Hash["binary" => "01011", "qcontent" => "Upload"],
			Hash["binary" => "01100", "qcontent" => "Options"],
			Hash["binary" => "01101", "qcontent" => "Mean"],
			Hash["binary" => "01110", "qcontent" => "Not-Posses"],
			Hash["binary" => "01111", "qcontent" => "Code"],
			Hash["binary" => "10000", "qcontent" => "Result"],
			Hash["binary" => "10001", "qcontent" => "Action"],
			Hash["binary" => "10010", "qcontent" => "Waived"],
			Hash["binary" => "10011", "qcontent" => "Fill"],
			Hash["binary" => "10100", "qcontent" => "Related"],
			Hash["binary" => "10101", "qcontent" => "Logon"],
			Hash["binary" => "10110", "qcontent" => "Years"],
			Hash["binary" => "10111", "qcontent" => "Obtain"],
			Hash["binary" => "11000", "qcontent" => "Age"],
			Hash["binary" => "11001", "qcontent" => "Know"],
			Hash["binary" => "11010", "qcontent" => "Navigate"],
			Hash["binary" => "11011", "qcontent" => "Fill"],
			Hash["binary" => "11100", "qcontent" => "Acts"]
		]
		
		# return binary data
		if(type == "quesiton_type")
			return quesiton_type[decimal]["binary"]
		elsif(type == "question_content")
			return question_content[decimal]["binary"]
		elsif(type == "question_object")
			return question_object[decimal]["binary"]
		elsif(type == "coverage_action")
			return coverage_action[decimal]["binary"]
		elsif(type == "location_india")
			return location_india[decimal]["binary"]
		elsif(type == "action_verb")
			return action_verb[decimal]["binary"]
		elsif(type == "navigate_to")
			return navigate_to[decimal]["binary"]
		end
	end
	
	# method for replying to user
	def reply msg
		# get message from user
		rep = @@client.message(msg)
		# handle the message
		puts handle_message(rep)
		
		# interactive Wit
		#@@client.interactive(method(:handle_message))
	end
end